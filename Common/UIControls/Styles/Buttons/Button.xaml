<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

  <!-- ################################################################### -->
  <!-- Define                                                       -->
  <!-- ################################################################### -->
  <!-- Main -->
  <sys:Double x:Key="Button_Height">32</sys:Double>
  <sys:Double x:Key="Button_Width">120</sys:Double>
  <sys:Double x:Key="Button_FontSize">14</sys:Double>

  <Style x:Key="Style.FocusVisualStyle.RedBox">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="-2" StrokeThickness="1" Stroke="Yellow" StrokeDashArray="1 2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ################################################################### -->
  <!-- Button Visual                                                       -->
  <!-- ################################################################### -->
  <CornerRadius    x:Key="Button_CornerRadius"          TopLeft="1" TopRight="1" BottomRight="1" BottomLeft="1" />
  <Thickness       x:Key="Button_BorderThickness"       Left="0" Top="0" Right="0"  Bottom="0" />

  <Thickness       x:Key="Button_BorderMargin"          Left="1" Right="1" Top="1" Bottom="1" />
  <Thickness       x:Key="Button_BorderMargin.Pressed"  Left="2" Right="0" Top="2" Bottom="0" />

  <SolidColorBrush x:Key="Button_BorderBrush"           Color="#44AA44"/>
  <SolidColorBrush x:Key="Button_BorderBrush.Disabled"  Color="#F4F4F4"/>

  <!-- ################################################################### -->
  <!-- Button Color                                                        -->
  <!-- ################################################################### -->

  <!-- Normal -->
  <SolidColorBrush x:Key="Button_Foreground" Color="#EEEEEE"/>
  <SolidColorBrush x:Key="Button_Background" Color="#44AA44"/>
  <!-- MouseOver -->
  <SolidColorBrush x:Key="Button_Foreground.MouseOver" Color="#555555"/>
  <SolidColorBrush x:Key="Button_Background.MouseOver" Color="#90BB90"/>
  <!-- Pressed -->
  <SolidColorBrush x:Key="Button_Foreground.Pressed" Color="Black"/>
  <SolidColorBrush x:Key="Button_Background.Pressed" Color="#90EE90"/>
  <!-- Disable -->
  <SolidColorBrush x:Key="Button_Foreground.Disabled" Color="#888888"/>
  <SolidColorBrush x:Key="Button_Background.Disabled" Color="#F4F4F4"/>


  <!-- ################################################################### -->
  <!--  Button                                                             -->
  <!-- ################################################################### -->
  <Style x:Key="CommonButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FontSize"  Value="{StaticResource Button_FontSize}"/>
    <Setter Property="Height"    Value="{StaticResource Button_Height}"/>
    <!--<Setter Property="Width"        Value="{StaticResource Button_Width}" />-->
    <Setter Property="Foreground"       Value="{StaticResource Button_Foreground}" />
    <Setter Property="Background"       Value="{StaticResource Button_Background}" />
    <Setter Property="BorderBrush"      Value="{StaticResource Button_BorderBrush}" />
    <Setter Property="BorderThickness"  Value="{StaticResource Button_BorderThickness}" />
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment"          Value="Center"/>
    <Setter Property="FontWeight"                 Value="Normal"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource Style.FocusVisualStyle.RedBox}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Margin="{StaticResource Button_BorderMargin}"
                  CornerRadius="{StaticResource Button_CornerRadius}" >
            <ContentPresenter Margin="2"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Foreground"   Value="{StaticResource Button_Foreground.MouseOver}"/>
              <Setter Property="Background"   Value="{StaticResource Button_Background.MouseOver}" />
              <Setter Property="BorderBrush"  Value="{StaticResource Button_Background.MouseOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Foreground"   Value="{StaticResource Button_Foreground.Pressed}"/>
              <Setter Property="Background"   Value="{StaticResource Button_Background.Pressed}" />
              <Setter Property="BorderBrush"  Value="{StaticResource Button_Background.Pressed}" />
              <Setter TargetName="Border" Property="Margin" Value="{StaticResource Button_BorderMargin.Pressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground"   Value="{StaticResource Button_Foreground.Disabled}"/>
              <Setter Property="Background"   Value="{StaticResource Button_Background.Disabled}" />
              <Setter Property="BorderBrush"  Value="{StaticResource Button_BorderBrush.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ################################################################### -->
  <!-- ToggleButton Button                                                 -->
  <!-- ################################################################### -->

  <!-- usage
  <ToggleButton Content="{Binding RunCommand.Header}" Command="{Binding RunCommand}"
                          IsChecked="{Binding RunCommand.IsChecked, Mode=TwoWay}" />
  -->

  <Style x:Key="CommonToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FontSize"         Value="{StaticResource Button_FontSize}"/>
    <Setter Property="Height"           Value="{StaticResource Button_Height}"/>
    <Setter Property="Foreground"       Value="{StaticResource Button_Foreground}" />
    <Setter Property="Background"       Value="{StaticResource Button_Background}" />
    <Setter Property="BorderBrush"      Value="{StaticResource Button_BorderBrush}" />
    <Setter Property="BorderThickness"  Value="{StaticResource Button_BorderThickness}" />
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment"          Value="Center"/>
    <Setter Property="FontWeight"                 Value="Normal"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource Style.FocusVisualStyle.RedBox}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Command" Value="{Binding Command}" />
    <Setter Property="CommandParameter" Value="{Binding IsChecked,RelativeSource={RelativeSource Self}}"/>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Margin="{StaticResource Button_BorderMargin}"
                    CornerRadius="3">

              <ContentPresenter Margin="2"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True" />
            </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="Orange" />
              <Setter Property="Foreground" Value="Black" />
            </Trigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Foreground" Value="{StaticResource Button_Foreground.MouseOver}"/>
              <Setter Property="Background" Value="{StaticResource Button_Background.MouseOver}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Foreground" Value="{StaticResource Button_Foreground.Pressed}"/>
              <Setter Property="Background" Value="{StaticResource Button_Background.Pressed}" />
              <Setter TargetName="Border" Property="Margin" Value="{StaticResource Button_BorderMargin.Pressed}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="false" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Foreground" Value="{StaticResource Button_Foreground.Disabled}"/>
              <Setter Property="Background" Value="{StaticResource Button_Background.Disabled}" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="TransparentToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FontSize"         Value="{StaticResource Button_FontSize}"/>
    <Setter Property="Height"           Value="{StaticResource Button_Height}"/>
    <Setter Property="Foreground"       Value="{StaticResource Button_Foreground}" />
    <Setter Property="Background"       Value="Transparent" />
    <Setter Property="BorderBrush"      Value="Transparent" />
    <Setter Property="BorderThickness"  Value="{StaticResource Button_BorderThickness}" />
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment"          Value="Center"/>
    <Setter Property="FontWeight"                 Value="Normal"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <!--<Setter Property="Command" Value="{Binding Command}" />
    <Setter Property="CommandParameter" Value="{Binding IsChecked,RelativeSource={RelativeSource Self}}"/>-->

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Margin="{StaticResource Button_BorderMargin}"
                    CornerRadius="3">

            <ContentPresenter Margin="2"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ################################################################### -->
  <!-- RepeatButton Button                                                 -->
  <!-- ################################################################### -->
  <Thickness       x:Key="RepeatButton_BorderMargin.Pressed"  Left="1" Right="1" Top="2" Bottom="0" />

  <Style x:Key="CommonRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Foreground"       Value="{StaticResource Button_Foreground}" />
    <Setter Property="Background"       Value="{StaticResource Button_Background}" />
    <Setter Property="BorderBrush"      Value="{StaticResource Button_BorderBrush}" />
    <Setter Property="BorderThickness"  Value="{StaticResource Button_BorderThickness}" />
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment"          Value="Center"/>
    <Setter Property="FontWeight"                 Value="Normal"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource Style.FocusVisualStyle.RedBox}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RepeatButton">
          <Border x:Name="Border"
                 Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Margin="{StaticResource Button_BorderMargin}"
                    CornerRadius="1">

            <ContentPresenter Margin="0"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Foreground" Value="{StaticResource Button_Foreground.MouseOver}"/>
              <Setter Property="Background" Value="{StaticResource Button_Background.MouseOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Foreground" Value="{StaticResource Button_Foreground.Pressed}"/>
              <Setter Property="Background" Value="{StaticResource Button_Background.Pressed}" />
              <Setter TargetName="Border" Property="Margin" Value="{StaticResource RepeatButton_BorderMargin.Pressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{StaticResource Button_Foreground.Disabled}"/>
              <Setter Property="Background" Value="{StaticResource Button_Background.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!--
  https://docs.microsoft.com/ko-kr/dotnet/desktop/wpf/controls/button-styles-and-templates?view=netframeworkdesktop-4.8
  <버튼 표준 색상>
  1) background
    normal    : DDDDDD
    mouseover : BEE6FD
    disable   : F4F4F4
  2) border bursh
    normal    : 707070
    mouseover : 3C7FB1
    disable   : ADB2B5
  3) foreground:
    disabled: 888888
  -->

</ResourceDictionary>