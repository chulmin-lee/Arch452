<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/UIControls;component/Menus/Styles/MenuCommon.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <!-- ################################################################### -->
  <!-- Role : TopLevelHeader                                               -->
  <!-- ################################################################### -->
  <ControlTemplate x:Key="Template.MenuItem.TopLevelHeader" TargetType="{x:Type MenuItem}">
    <Border x:Name="Border" Background="{StaticResource Topmenu.Background}">
      <Grid>
        <!-- top level menu header -->
        <ContentPresenter Margin="10,0,10,0" ContentSource="Header" RecognizesAccessKey="True"
                          VerticalAlignment="Center" />
        <!-- 자식 메뉴 목록 -->
        <Popup x:Name="Popup" Placement="Bottom"
               IsOpen="{TemplateBinding IsSubmenuOpen}"
               AllowsTransparency="False" Focusable="False" PopupAnimation="Fade">
          <!-- 자식 메뉴들의 Border -->
          <Border x:Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  BorderThickness="1"
                  BorderBrush="DarkGray"
                  Background="{StaticResource Submenu.Background}">
            <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewerStyle}">
              <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
            </ScrollViewer>
          </Border>
        </Popup>
      </Grid>
    </Border>

    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="Border" Property="Background" Value="{StaticResource Topmenu.Background.Hover}" />
        <Setter Property="Foreground" Value="{StaticResource Topmenu.Foreground.Hover}" />
      </Trigger>
      <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4" />
        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource Topmenu.Background.Pressed}" />
        <Setter Property="Foreground" Value="{StaticResource Topmenu.Foreground.Pressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{StaticResource Topmenu.Foreground.Disabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- ################################################################### -->
  <!-- Role : TopLevelItem (사용되지 않음)                                  -->
  <!-- ################################################################### -->
  <ControlTemplate x:Key="Template.MenuItem.TopLevelItem" TargetType="{x:Type MenuItem}">
    <Border x:Name="Border" Background="Red">
      <Grid>
        <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Background" TargetName="Border">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
              <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                  <GradientStop Color="White" />
                  <GradientStop Color="#FF3843C4" Offset="1.0" />
                </GradientStopCollection>
              </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{StaticResource Topmenu.Foreground.Disabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- ################################################################### -->
  <!-- Role : SubmenuHeader (자식을 가지는 submenu)                         -->
  <!-- ################################################################### -->
  <ControlTemplate x:Key="Template.MenuItem.SubmenuHeader" TargetType="{x:Type MenuItem}">
    <Border x:Name="Border" Height="{StaticResource Menu_Height}"
            Background="{StaticResource Submenu.Background}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="{StaticResource Menu_IconGridWidth}" />
          <ColumnDefinition Width="*" MinWidth="50"/>
          <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
          <ColumnDefinition Width="13" />
        </Grid.ColumnDefinitions>

        <Border BorderBrush="Transparent" BorderThickness="1">
          <Image x:Name="Icon" Source="{TemplateBinding Icon}"
                   Width="{StaticResource Menu_IconWidth}"
                          Height="{StaticResource Menu_IconHeight}"/>
        </Border>

        <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"  VerticalAlignment="Center"/>
        <TextBlock Grid.Column="2" Text="{TemplateBinding InputGestureText}"
                   Margin="5,2,2,2" DockPanel.Dock="Right" />
        <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center"
              Data="{StaticResource Menu_HasChildMark}"
              Fill="Yellow" />

        <Popup x:Name="Popup" Placement="Right" HorizontalOffset="1"
             IsOpen="{TemplateBinding IsSubmenuOpen}"
             AllowsTransparency="False" Focusable="False" PopupAnimation="Fade">
          <Border x:Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  BorderThickness="1"
                  BorderBrush="DarkGray"
                  Background="{StaticResource Submenu.Background}">
            <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewerStyle}">
              <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
            </ScrollViewer>
          </Border>
        </Popup>
      </Grid>
    </Border>

    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Background" TargetName="Border" Value="{StaticResource Submenu.Background.Hover}" />
        <Setter Property="Icon" Value="{Binding Icons.MouseOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" TargetName="Border" Value="{StaticResource Submenu.Background.Pressed}" />
        <Setter Property="Foreground" Value="{StaticResource Submenu.Foreground.Pressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{StaticResource Submenu.Foreground.Disabled}" />
        <Setter Property="Icon" Value="{Binding Icons.Disabled}" />
      </Trigger>
      <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4" />
        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- ################################################################### -->
  <!-- Role : SubmenuItem                                                  -->
  <!-- ################################################################### -->
  <ControlTemplate x:Key="Template.MenuItem.SubmenuItem" TargetType="{x:Type MenuItem}">
    <Border x:Name="Border" Height="{StaticResource Menu_Height}"
            Background="{StaticResource Submenu.Background}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="{StaticResource Menu_IconGridWidth}" />
          <ColumnDefinition Width="*" MinWidth="50"/>
          <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
          <ColumnDefinition Width="13" />
        </Grid.ColumnDefinitions>

        <Border BorderBrush="Transparent" BorderThickness="1">
          <Image x:Name="Icon" Source="{TemplateBinding Icon}"
                   Width="{StaticResource Menu_IconWidth}"
                          Height="{StaticResource Menu_IconHeight}"/>
        </Border>


        <!--<ContentPresenter x:Name="Icon" ContentSource="Icon"
                          Width="{StaticResource Menu_IconWidth}"
                          Height="{StaticResource Menu_IconHeight}"/>-->

        <!-- IsCheck Icon 표시 (박스는 지움) -->
        <Border Grid.Column="0" x:Name="Check" Visibility="Collapsed"
                VerticalAlignment="Center" HorizontalAlignment="Center">

          <Path x:Name="CheckMark" Visibility="Hidden" SnapsToDevicePixels="False"
                VerticalAlignment="Center" HorizontalAlignment="Center"
                Stroke="{StaticResource CheckMark_Stroke}" StrokeThickness="2" Data="{StaticResource Menu_CheckMark}" />
        </Border>
        <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center"/>
        <TextBlock Grid.Column="2" Text="{TemplateBinding InputGestureText}"
                   Margin="5,2,0,2" DockPanel.Dock="Right" VerticalAlignment="Center" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsCheckable" Value="true">
        <Setter TargetName="Check" Property="Visibility" Value="Visible" />
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Background" TargetName="Border" Value="{StaticResource Submenu.Background.Hover}" />
        <Setter Property="Icon" Value="{Binding Icons.MouseOver}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" TargetName="Border" Value="{StaticResource Submenu.Background.Pressed}" />
        <Setter Property="Foreground" Value="{StaticResource Submenu.Foreground.Pressed}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{StaticResource Submenu.Foreground.Disabled}" />
        <Setter Property="Icon" Value="{Binding Icons.Disabled}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>


  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
  <!-- MenuItem Style -->
  <Style x:Key="Style.MenuItem.Base" TargetType="{x:Type MenuItem}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="FontSize" Value="13" />
    <Setter Property="Foreground" Value="{StaticResource Submenu.Foreground}" />
    <Setter Property="Header" Value="{Binding Header}" />
    <Setter Property="ItemsSource" Value="{Binding Children}" />
    <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
    <Setter Property="IsChecked" Value="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
    <Setter Property="Command" Value="{Binding Command}" />
    <Setter Property="CommandParameter" Value="{Binding }"/>
    <Setter Property="InputGestureText" Value="{Binding Shortcuts}"/>
    <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
    <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter }}" />
    <Setter Property="Icon" Value="{Binding Icons.Normal}" />
    <!--<Setter Property="base:IsPressedAttached.IsEnabled" Value="True" />
    <Setter Property="base:IsPressedAttached.ButtonPressed" Value="{Binding IsMenuPressed}" />-->

    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Template" Value="{StaticResource Template.MenuItem.TopLevelHeader}" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HorizontalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Template" Value="{StaticResource Template.MenuItem.TopLevelItem}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template" Value="{StaticResource Template.MenuItem.SubmenuHeader}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuItem">
        <Setter Property="Template" Value="{StaticResource Template.MenuItem.SubmenuItem}" />
      </Trigger>

      <DataTrigger Binding="{Binding Path=IsSeparator}" Value="true">
        <Setter Property="MenuItem.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type MenuItem}">
              <Separator Style="{StaticResource MenuSeperatorStyle}" />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <!-- menu -->
  <Style x:Key="Style.Menu.Base" TargetType="{x:Type Menu}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource Style.MenuItem.Base}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border BorderThickness="1" Background="Transparent">
            <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- conextmenu -->
  <!-- HasDropShadow 사용하지 말것. 흐려진다 -->
  <Style x:Key="Style.ContextMenu.Base" TargetType="{x:Type ContextMenu}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
    <Setter Property="HasDropShadow" Value="False" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource Style.MenuItem.Base}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border x:Name="Border"
                  SnapsToDevicePixels="True"
                  BorderThickness="1"
                  BorderBrush="DarkGray"
                  Background="{StaticResource Submenu.Background}">
            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="true">
              <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
              <Setter TargetName="Border" Property="CornerRadius" Value="4" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


</ResourceDictionary>